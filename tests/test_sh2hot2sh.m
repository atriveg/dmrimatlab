%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function test_sh2hot2sh
% test_sh2hot2sh.m
rng(13061981);
clear;
close('all');
clc;
format('compact');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
load('test_data.mat');
tl = 100*eps;
tu = 1.0-tl;
atti(atti<tl) = tl;
atti(atti>tu) = tu;
L = 8;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SH  = atti2shadc( atti, gi, bi, 'L', L, 'mask', mask, 'lambda', 0.001, ...
    'tl', tl, 'tu', tu );
SH2 = atti2shadc( atti, gi, bi, 'L', 2, 'mask', mask, 'lambda', 0.001, ...
    'tl', tl, 'tu', tu );
GFA = sqrt( sum(SH2(:,:,:,2:end).*SH2(:,:,:,2:end),4)./sum(SH2.*SH2,4) );
GFA = GFA.*double(mask);
th  = quantile(GFA(mask),0.9);
pp  = find(GFA>=th);
pp  = pp(randperm(length(pp),15));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BLOCK I: check back and forth conversions
[HOT,A_SH_HOT]   = sh2hot(SH, 'mask',mask,'maxthreads',6);
[HOT2,A_SH_HOT2] = sh2hot(SH2,'mask',mask,'maxthreads',6);
% ---
dti = shadc2dti(SH,'mask',mask,'unroll',false);
% ---
[SHi,A_HOT_SH]   = hot2sh(HOT, 'mask',mask,'maxthreads',6);
[SH2i,A_HOT_SH2] = hot2sh(HOT2,'mask',mask,'maxthreads',6);
% -------------------------------------------------------------------------
fprintf(1,'Compare generic sh2hot to specialized shadc2dti\n');
C1 = pickup_(HOT2,pp);
C2 = pickup_(dti,pp);
C1, %#ok<NOPTS>
C2, %#ok<NOPTS>
fprintf(1,'Hit enter to continue\n');
pause;
clc;
% -------------------------------------------------------------------------
fprintf(1,'Compare original vs. back-forth converted SH (1)\n');
C1 = pickup_(SH,pp);
C2 = pickup_(SHi,pp);
C1, %#ok<NOPTS>
C2, %#ok<NOPTS>
fprintf(1,'Hit enter to continue\n');
pause;
clc;
% -------------------------------------------------------------------------
fprintf(1,'Compare original vs. back-forth converted SH (2)\n');
C1 = pickup_(SH2,pp);
C2 = pickup_(SH2i,pp);
C1, %#ok<NOPTS>
C2, %#ok<NOPTS>
fprintf(1,'Hit enter to continue\n');
pause;
clc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BLOCK II: compare evaluations provided by either SH or HOT
gi2 = [[0,0,1];icosamplesSphere(4)];
S_SH  = sh2signal( SH,  gi2, 'mask', mask );
[S_HOT,mu,pwrs] = hot2signal( HOT,  gi2, 'mask', mask, 'maxthreads', 6 );
% -------------------------------------------------------------------------
fprintf(1,'Compare SH vs. HOT evals (1)\n');
C1 = pickup_(S_SH, pp);
C2 = pickup_(S_HOT,pp);
for n=1:size(C1,1)
    [C1(n,:);C2(n,:)], %#ok<NOPTS>
end
fprintf(1,'Hit enter to continue\n');
pause;
clc;
% -------------------------------------------------------------------------
S_SH2 = sh2signal( SH2, gi2, 'mask', mask );
[S_HOT2,mu2,pwrs2] = hot2signal( HOT2, gi2, 'mask', mask, 'maxthreads', 6 );
% -------------------------------------------------------------------------
fprintf(1,'Compare SH vs. HOT evals (2)\n');
C1 = pickup_(S_SH2, pp);
C2 = pickup_(S_HOT2,pp);
for n=1:size(C1,1)
    [C1(n,:);C2(n,:)], %#ok<NOPTS>
end
fprintf(1,'Hit enter to continue\n');
pause;
clc;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function MAT = pickup_(vol,p)
[X,Y,Z,D] = size(vol);
vol = reshape(vol,[X*Y*Z,D]);
MAT = vol(p,:);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
