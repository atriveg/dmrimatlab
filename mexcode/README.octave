Almost all mex functions to be compiled rely in some way on matrix manipulations and linear albegra, so that a proper implementation for them is crucial. This is solved by systematically calling BLAS/LAPACK routines. As opposed to Matlab, GNU Linux's Octave does not embed itself a particular implementation of BLAS, but instead it depends on that provided by the system (typically, Netlib's BLAS/LAPACK through arpack). For this reason, dmrimatlab offers several options for the mex code to be compiled against. You can choose the one that best fits your needs by creating a file named 'config.octave' in this same subfolder ('mexcode'). The first line of this file must be a keyword telling the build script which BLAS implementation it should use, one of:

[netlib] So that the system-provided implementation (Netlib's BLAS/LAPACK) will be used. NOTE: in this case you will have to manually install the C interfaces to BLAS/LAPACK, i.e. use your preferred software manager (pacman, apt, ...) to install:
   - cblas, which will provide /usr/include/cbas.h and /usr/lib/libcblas.so (or alike).
   - lapacke, which will provide /usr/include/lapacke.h and /usr/lib/liblapacke.so (or alike).
Note that Netlib's implementations are not the reference ones, since they are both little efficient and buggy (though we haven't found any bug-related problems with our software). For this reason, one might prefer to use:

[openblas] So that a system-wide implementation of OpenBLAS will be used. NOTE: in this case you will have to manually install the "openblas" package with your preferred software manager (pacman, apt, ...). It will provide:
   - /usr/include/openblas/cblas.h, /usr/include/openblas/lapacke.h, /usr/lib/libopenblas.so(or alike).
OpenBLAS is more efficient that Netlib's implementation. Besides, it has multi-threading capabilities. Unfortunately, this is a problem for our mex code, which is also multi-threaded. If OpenBLAS is used as-it-is, this will cause that our mex file's threads create each new BLAS' threads that will compete with each other, dramatically decreasing the overall performance. Though modern OpenBLAS implementations provide a "blas_set_num_threads()" function, this does not seem reliable, so that the only fix we have found for the software to properly work is running Octave as:
   >> OMP_NUM_THREADS=1 octave
so that OpenBLAS will always run single-thread. Note, however, that any other Octave-related software using Open MP will also run single-thread with this fix, which might impact its performance.

[openblas-local] This will automatically download the source code and compile a local OpenBLAS library without Open MP, so that it will be single-threaded in nature, without conflicting with any other existing libraries. This is the safest and best performing option; besides, it does not require manually installing any additional software. However, it is slightly more complex since it has to compile OpenBLAS (and it will take some more time); note that you will need gcc, g++ and gfortran. This is the default option and, if it is used, the second line of 'config.octave' may be a keyword with the suffix appended to the name of the library.
